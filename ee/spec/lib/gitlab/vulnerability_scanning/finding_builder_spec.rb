# frozen_string_literal: true

require "spec_helper"

RSpec.describe Gitlab::VulnerabilityScanning::FindingBuilder, feature_category: :software_composition_analysis do
  let_it_be(:ci_build) { build(:ci_build) }
  let_it_be(:sbom) { build(:ci_reports_sbom_report) }
  let_it_be(:location) { build(:ci_reports_security_locations_sast) }
  let_it_be(:report_type) { :dependency_scanning }
  let_it_be(:security_report) { build(:ci_reports_security_report, type: report_type) }
  let_it_be(:component) { build(:ci_reports_sbom_component) }
  let_it_be(:advisory) { build(:pm_advisory) }

  subject(:builder) { described_class.new(ci_build, sbom, security_report, component, advisory) }

  describe "#finding" do
    context "when abstract methods have not been implemented" do
      context "when validataion has not been implemented" do
        it { expect { builder.finding }.to raise_error(NoMethodError, /#validate! is not implemented/) }
      end

      context "when location has not been implemented" do
        before do
          allow(builder).to receive(:validate!).and_return(nil)
        end

        it { expect { builder.finding }.to raise_error(NoMethodError, /#location is not implemented/) }
      end

      context "when original_data has not been implemented" do
        before do
          allow(builder).to receive(:validate!).and_return(nil)
          allow(builder).to receive(:location).and_return(location)
        end

        it { expect { builder.finding }.to raise_error(NoMethodError, /#original_data is not implemented/) }
      end
    end

    shared_examples 'emits warning for uuid' do
      it 'emits a warning for the missing UUID component' do
        expect(Gitlab::AppLogger).to receive(:warn).with(message: "One or more UUID name components are nil",
          components: Hash)

        builder.finding
      end
    end

    context "when creating uuid" do
      before do
        allow(Gitlab::AppLogger).to receive(:warn).and_call_original
        allow(builder).to receive(:validate!).and_return(nil)
        allow(builder).to receive(:location_fingerprint).and_return("01234567890abcdef")
        allow(builder).to receive(:location).and_return(location)
        allow(builder).to receive(:original_data).and_return({})
      end

      context "when security_report.type is nil" do
        let_it_be(:security_report) { build(:ci_reports_security_report, type: nil) }

        it_behaves_like 'emits warning for uuid'
      end

      context "when primary_identifier is nil" do
        before do
          allow(builder).to receive(:primary_identifier).and_return(nil)
        end

        it_behaves_like 'emits warning for uuid'
      end

      context "when location_fingerprint is nil" do
        before do
          allow(builder).to receive(:location_fingerprint).and_return(nil)
        end

        it_behaves_like 'emits warning for uuid'
      end

      context "when all uuid components are present" do
        it 'does not emit a warning for the missing UUID component' do
          expect(Gitlab::AppLogger).not_to receive(:warn)

          builder.finding
        end
      end
    end

    context "when creating finding name" do
      before do
        allow(builder).to receive(:validate!).and_return(nil)
        allow(builder).to receive(:original_data).and_return({})
      end

      context "when location fingerprint path exists" do
        before do
          allow(builder).to receive(:location).and_return(location)
        end

        it { expect(builder.finding.name).to eq("CVE-2024-00001 in App.java") }
      end

      context "when location fingerprint path does not exist" do
        before do
          allow(builder).to receive(:location).and_return(nil)
        end

        it { expect(builder.finding.name).to eq("CVE-2024-00001") }
      end
    end
  end
end
