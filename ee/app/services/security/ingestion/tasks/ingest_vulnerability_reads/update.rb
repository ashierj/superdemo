# frozen_string_literal: true

module Security
  module Ingestion
    module Tasks
      class IngestVulnerabilityReads
        # Updates the existing vulnerability_reads records
        # by using a single database query.
        class Update < AbstractTask
          include Gitlab::Ingestion::BulkUpdatableTask

          self.model = Vulnerabilities::Read

          VALID_OWASP_PRIORITY_LABELS = %w[A1 A2 A3 A4 A5 A6 A7 A8 A9 A10].freeze
          VALID_OWASP_YEARS = %w[2017 2021].freeze

          delegate :project, to: :pipeline, private: true

          private

          # Note: https://gitlab.com/gitlab-org/gitlab/-/issues/430025 can iterate by
          # merging the hash for other columns like attributes_for_has_remediations, attributes_for_has_merge_requests
          # using hash.group_by(vulnerability_id), hash.merge functions.
          def attributes
            finding_maps.map do |finding_map|
              attributes = {
                vulnerability_id: finding_map.vulnerability_id,
                traversal_ids: project.namespace.traversal_ids,
                archived: project.archived,
                owasp_top_10: nil,
                scanner_id: finding_map.scanner_id
              }

              append_owasp_identifier_to(attributes, finding_map)

              attributes
            end
          end

          def append_owasp_identifier_to(attributes, finding_map)
            owasp_identifier = finding_map.identifiers.find do |identifier|
              identifier.external_type.casecmp?('owasp')
            end

            return unless owasp_identifier.present?

            attributes.merge!({ owasp_top_10: map_owasp_external_id(owasp_identifier.external_id) })
          end

          # The maximum set of observed external_id is having the label, year without the name. Eg: 'A5:2017'.
          # See: https://gitlab.com/gitlab-org/gitlab/-/issues/423557#note_1539490082
          def map_owasp_external_id(external_id)
            return unless valid_external_id?(external_id)

            ::Enums::Vulnerability.owasp_top_10.keys.find { |key| key.include?(external_id) }
          end

          def valid_external_id?(external_id)
            arr = external_id.split(':')

            priority_label = arr.first
            year = arr.second ? arr.second[0..3] : nil

            return false if year.nil? || VALID_OWASP_YEARS.exclude?(year)

            VALID_OWASP_PRIORITY_LABELS.include?(priority_label)
          end
        end
      end
    end
  end
end
